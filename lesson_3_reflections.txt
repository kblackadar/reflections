When would you want to use a remote repository rather than keeping all your work local?

I would want to use a remote repository rather than keeping all the work local if I wanted to share work with others or wanted to receive
feedback from others regarding my work.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I might want to pull changes manually from my remote repository because there could be changes that are on my remote repository that I or
another user has made that I am not ready to have on my own version on Git.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a copy of someone else's repository on GitHub.  A clone is a copy of a repository either on Git or GitHub.  A branch is a commit
that is points to a different path in your series of commits.  For example, you would create a fork of someone's repository on GitHub
if you didn't have permission to modify or didn't want to modify someone else's repository on GitHub.  You would clone a repository
if you wanted to create a copy of a repository, either from GitHub onto your local machine or from your machine to your machine.  You
would create a branch if you wanted to create another version of a program, possibly to modify some of the features of that program to
create a different version of the program or to test code before adding it to the current branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of the last known state of the remote stored locally allows the user to
compare this state with the current local state easily and even if the user is offline in
order to determine what differences there are, if any, between the remote and local versions
of code.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without using Git or GitHub, you would need to create a different version when you had a change that you wanted to be reviewed by someone
else.  You would need to create a way to identify what those changes were so the person reviewing the changes knew how to identify
those changes.  Then you would need to send the code to the reviewer and wait for a response on whether those changes were accepted.
Meanwhile, if you made any changes to the code while waiting for approval of your changes you would have to keep track of those changes
so you could alert the reviewer of those changes as well. It would be much more difficult to do this type of collaboration and could
easily lead to errors by having several different versions of code without one "place" where all the changes are tracked and stored.
